import type User from '../game/user.ts';
import type Room from '../game/room.ts';
import { type IUser, type WsRequest } from '@/types/types.ts';
import { type WebSocket } from 'ws';

class UserSession {
  ws: WebSocket;
  user: User | undefined;
  room: Room | undefined;
  gamePlayer: string | undefined;

  constructor(ws: WebSocket) {
    this.ws = ws;
  }

  sendMessage = (msg: WsRequest): void => {
    if (msg) {
      this.ws.send(JSON.stringify(msg));
    }
  };

  setUser = (user: User): void => {
    this.user = user;
    this.sendMessage({
      type: 'reg',
      data: JSON.stringify({
        name: user.name,
        index: user.index,
      }),
      id: 0,
    });
  };

  setRoom = (room: Room): void => {
    this.room = room;
    this.gamePlayer = room.games.find((el) => el.user.name === this.user?.name)?.indexPlayer;

    this.room.gameEmitter.on('create_game', () => {
      this.sendMessage({
        type: 'create_game',
        data: JSON.stringify({
          idGame: room.games[0].gameId,
          idPlayer: this.gamePlayer /* generated by server id for player in the game session, not enemy (unique id for every player) */,
        }),
        id: 0,
      });
    });

    this.room.gameEmitter.on('start_game', () => {
      console.log(this.room?.games.find((el) => el.indexPlayer === this.gamePlayer)?.getShips());
      this.sendMessage({
        type: 'start_game',
        data: JSON.stringify({
          ships: this.room?.games.find((el) => el.indexPlayer === this.gamePlayer)?.getShips(),
          currentPlayerIndex: this.room?.currentPlayerIndex,
        }),
        id: 0,
      });
    });

    this.room.gameEmitter.on('attack_feedback', (data) => {
      console.log(data);
      data.forEach((el: any) => {
        this.sendMessage({
          type: 'attack',
          data: JSON.stringify(el),
          id: 0,
        });
      });
      this.sendMessage({
        type: 'turn',
        data: JSON.stringify({ currentPlayer: this.room?.currentPlayerIndex }),
        id: 0,
      });
    });

    this.room.gameEmitter.on('finish', (data) => {
      this.sendMessage({
        type: 'finish',
        data: JSON.stringify(data),
        id: 0,
      });
    });
  };
}

export default UserSession;
